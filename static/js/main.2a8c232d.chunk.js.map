{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/Playlist/Playlist.js","Components/SearchResults/SearchResults.js","components/SearchBar/SearchBar.js","config.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","e","setState","target","value","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","key","id","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","SearchResults","searchResults","clientID","redirectUri","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","playlistName","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","updatePlaylistName","find","savedTracks","push","newTracks","filter","currentTrack","newName","addEventListener","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2a8c232d.chunk.js","sourcesContent":["import { SearchBar } from \"../components/SearchBar/SearchBar\";\nimport { config } from \"../config\";\n\nlet accessToken;\nconst clientID = config.clientID;\nconst redirectUri = config.redirectUri;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n    //check for access token match\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      //This will clear the parameters and allow us to grab a new access token.\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n      window.history.pushState(\"Access Token\", null, \"/\");\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    })\n      .then(response => {\n        return response.json();\n      })\n      .then(jsonResponse => {\n        if (!jsonResponse.tracks) {\n          return [];\n        }\n        return jsonResponse.tracks.items.map(track => ({\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        }));\n      });\n  },\n\n  savePlaylist(playlistName, trackUris) {\n    if (!playlistName || !trackUris.length) {\n      return;\n    }\n    const accessToken = Spotify.getAccessToken();\n    const headers = { Authorization: `Bearer ${accessToken}` };\n    let userId;\n\n    return fetch(\"https://api.spotify.com/v1/me\", { headers: headers }).then(\n      response =>\n        response.json().then(jsonResponse => {\n          userId = jsonResponse.id;\n          return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n            headers: headers,\n            method: \"POST\",\n            body: JSON.stringify({ name: playlistName })\n          })\n            .then(response => response.json())\n            .then(jsonResponse => {\n              const playlistId = jsonResponse.id;\n              return fetch(\n                `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,\n                {\n                  headers: headers,\n                  method: \"POST\",\n                  body: JSON.stringify({ uris: trackUris })\n                }\n              );\n            });\n        })\n    );\n  }\n};\n\nexport default Spotify;\n","import React from \"react\";\nimport \"./SearchBar.css\";\n\nexport class SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      term: \"\"\n    };\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n  }\n\n  search() {\n    this.props.onSearch(this.state.term);\n  }\n\n  handleTermChange(e) {\n    this.setState({ term: e.target.value });\n  }\n\n  render() {\n    return (\n      <div className='SearchBar'>\n        <input\n          onChange={this.handleTermChange}\n          placeholder='Enter A Song, Album, or Artist'\n        />\n        <button className='SearchButton' onClick={this.search}>\n          SEARCH\n        </button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./Track.css\";\n\nexport class Track extends React.Component {\n  constructor(props) {\n    super(props);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n  }\n  renderAction() {\n    if (this.props.isRemoval) {\n      return (\n        <button className=\"Track-action\" onClick={this.removeTrack}>\n          -\n        </button>\n      );\n    } else {\n      return (\n        <button className=\"Track-action\" onClick={this.addTrack}>\n          +\n        </button>\n      );\n    }\n  }\n  addTrack() {\n    this.props.onAdd(this.props.track);\n  }\n  removeTrack() {\n    this.props.onRemove(this.props.track);\n  }\n  render() {\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>\n            {this.props.track.artist} | {this.props.track.album}\n          </p>\n        </div>\n        {this.renderAction()}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./TrackList.css\";\nimport { Track } from \"../Track/Track\";\n\nexport class TrackList extends React.Component {\n  render() {\n    return (\n      <div className=\"TrackList\">\n        {this.props.tracks.map(track => {\n          return (\n            <Track\n              track={track}\n              key={track.id}\n              onAdd={this.props.onAdd}\n              onRemove={this.props.onRemove}\n              isRemoval={this.props.isRemoval}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./Playlist.css\";\nimport { TrackList } from \"../TrackList/TrackList\";\n\nexport class Playlist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n  handleNameChange(e) {\n    this.props.onNameChange(e.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"Playlist\">\n        <input defaultValue={\"New Playlist\"} onChange={this.handleNameChange} />\n        {\n          <TrackList\n            tracks={this.props.playlistTracks}\n            onRemove={this.props.onRemove}\n            isRemoval={true}\n          />\n        }\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>\n          SAVE TO SPOTIFY\n        </button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./SearchResults.css\";\nimport { TrackList } from \"../TrackList/TrackList\";\n\nexport class SearchResults extends React.Component {\n  render() {\n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList\n          tracks={this.props.searchResults}\n          onAdd={this.props.onAdd}\n          isRemoval={false}\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./SearchBar.css\";\n\nexport class SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      term: \"\"\n    };\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n  }\n\n  search() {\n    this.props.onSearch(this.state.term);\n  }\n\n  handleTermChange(e) {\n    this.setState({ term: e.target.value });\n  }\n\n  render() {\n    return (\n      <div className='SearchBar'>\n        <input\n          onChange={this.handleTermChange}\n          placeholder='Enter A Song, Album, or Artist'\n        />\n        <button className='SearchButton' onClick={this.search}>\n          SEARCH\n        </button>\n      </div>\n    );\n  }\n}\n","export const config = {\n  clientID: \"7350df562fc2461996d1482e2d62fa72\",\n  redirectUri: \"http://perfect-playlist.surge.sh/\"\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { SearchBar } from \"../SearchBar/SearchBar\";\nimport { Playlist } from \"../Playlist/Playlist\";\nimport { SearchResults } from \"../SearchResults/SearchResults\";\nimport Spotify from \"../../util/Spotify\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: \"My Playlist\",\n      playlistTracks: []\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTracks => savedTracks.id === track.id)) {\n      return;\n    } else {\n      tracks.push(track);\n      this.setState({ playlistTracks: tracks });\n    }\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    let newTracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n    this.setState({ playlistTracks: newTracks });\n  }\n\n  updatePlaylistName(newName) {\n    this.setState({ playlistName: newName });\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: \"New Playlist\",\n        playlistTracks: [],\n        searchResults: []\n      });\n    });\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({ searchResults: searchResults });\n    });\n  }\n  componentDidMount() {\n    window.addEventListener(\"load\", () => {\n      Spotify.getAccessToken();\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>\n          Ja<span className=\"highlight\">mmm</span>ing\n        </h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults\n              searchResults={this.state.searchResults}\n              onAdd={this.addTrack}\n            />\n            <Playlist\n              playlistName={this.state.playlistName}\n              playlistTracks={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"../src/Components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}